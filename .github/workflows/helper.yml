name: Helper

on:
  push:
    branches:
      - master
      - dd-appsec-php-**
    tags:
      - "*"
  pull_request:
    paths-ignore:
      - cmake/extension.cmake
      - cmake/run-tests-wrapper.sh
      - cmake/run_tests.cmake
      - cmake/tracer.cmake
      - src/extension/**
      - tests/extension/**
      - tests/mock_helper/**
      - tests/integration/**
      - examples/**
      - valgrind.supp
      - run-tests.php
      - 'LICENSE**'
      - NOTICE
      - '**.md'
      - .github/workflows/codeql.yml
      - .github/workflows/extension.yml
      - .github/workflows/integration.yml
      - .github/workflows/package.yml
      - .github/workflows/release.yml
      - .github/workflows/system-tests.yml
      - .github/workflows/release/**
  schedule:
    - cron:  30 0 * * *
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
jobs:
  helper-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Cache hunter packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.hunter
          key: ${{ runner.os }}-helper
      - name: Generate Build Scripts
        run: |
            mkdir build
            cd build
            cmake .. -DDD_APPSEC_BUILD_EXTENSION=OFF -DDD_APPSEC_ENABLE_COVERAGE=ON
      - name: Build
        run: VERBOSE=1 make -j ddappsec-helper ddappsec_helper_test
        working-directory: ${{ github.workspace }}/build
      - name: Test
        run: ./tests/helper/ddappsec_helper_test
        working-directory: ${{ github.workspace }}/build
      - name: Generate coverage report
        run: |
          sudo apt-get update
          sudo apt-get install -y gcovr
          gcovr -f '.*src/helper/.*' -x -d -o coverage.xml
      - name: Submit coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: helper
          verbose: true
          files: coverage.xml
  helper-test-asan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Cache hunter packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.hunter
          key: ${{ runner.os }}-helper
      - name: Install clang-{tidy,format}
        run: |
          sudo apt-get remove -y python3-lldb-14
          sudo .github/workflows/scripts/llvm.sh 15
          sudo apt-get install -y clang-tidy-15 clang-format-15 libboost-system-dev
      - name: Generate Build Scripts
        run: |
            mkdir build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Debug \
            -DDD_APPSEC_BUILD_EXTENSION=OFF \
            -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize=leak -DASAN_BUILD" \
            -DCMAKE_C_FLAGS="-fsanitize=address -fsanitize=leak -DASAN_BUILD" \
            -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address -fsanitize=leak" \
            -DCMAKE_MODULE_LINKER_FLAGS="-fsanitize=address -fsanitize=leak" \
            -DCLANG_TIDY=/usr/bin/run-clang-tidy-15 \
            -DCLANG_FORMAT=/usr/bin/run-clang-format-15 \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      - name: Build
        run: make -j $(nproc) ddappsec-helper ddappsec_helper_test
        working-directory: ${{ github.workspace }}/build
      - name: Run clang-tidy
        run: |
          VERBOSE=1 make -C build tidy
      - name: Test
        run: |
            ASAN_OPTIONS="verbosity=1 fast_unwind_on_malloc=0 detect_leaks=1" \
            LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.6 \
            ./tests/helper/ddappsec_helper_test
        working-directory: ${{ github.workspace }}/build
  helper-fuzzer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Cache hunter packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.hunter
          key: ${{ runner.os }}-helper
      - name: Install clang
        run: |
          sudo apt-get remove -y python3-lldb-14
          sudo .github/workflows/scripts/llvm.sh 15
      - name: Generate Build Scripts
        run: |
            mkdir build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Debug  -DDD_APPSEC_BUILD_EXTENSION=OFF
        env:
            CXX: clang++-15
            CC: clang-15
      - name: Build
        run: make -j $(nproc) ddappsec_helper_fuzzer corpus_generator
        working-directory: ${{ github.workspace }}/build
      - name: Create directories
        run: mkdir -p tests/fuzzer/{corpus,results,logs}
        working-directory: ${{ github.workspace }}
      - name: Generate corpus
        run: |
            rm -f tests/fuzzer/corpus/*
            ./build/tests/fuzzer/corpus_generator tests/fuzzer/corpus 500
        working-directory: ${{ github.workspace }}
      - name: Run fuzzer in nop mode
        run: ./build/tests/fuzzer/ddappsec_helper_fuzzer --log_level=off --fuzz-mode=off -max_total_time=60 -artifact_prefix=tests/fuzzer/results/ tests/fuzzer/corpus/
        working-directory: ${{ github.workspace }}
        env:
            LLVM_PROFILE_FILE: off.profraw
      - name: Generate corpus
        run: |
            rm -f tests/fuzzer/corpus/*
            ./build/tests/fuzzer/corpus_generator tests/fuzzer/corpus 500
        working-directory: ${{ github.workspace }}
      - name: Run fuzzer in raw mode
        run: ./build/tests/fuzzer/ddappsec_helper_fuzzer --log_level=off --fuzz-mode=raw -max_total_time=60 -artifact_prefix=tests/fuzzer/results/ tests/fuzzer/corpus/
        working-directory: ${{ github.workspace }}
        env:
            LLVM_PROFILE_FILE: raw.profraw
      - name: Generate corpus
        run: |
            rm -f tests/fuzzer/corpus/*
            ./build/tests/fuzzer/corpus_generator tests/fuzzer/corpus 500
        working-directory: ${{ github.workspace }}
      - name: Run fuzzer in body mode
        run: ./build/tests/fuzzer/ddappsec_helper_fuzzer --log_level=off --fuzz-mode=body -max_total_time=60 -artifact_prefix=tests/fuzzer/results/ tests/fuzzer/corpus/
        working-directory: ${{ github.workspace }}
        env:
            LLVM_PROFILE_FILE: body.profraw
      - name: Generate coverage
        run: |
            llvm-profdata-15 merge -sparse *.profraw -o default.profdata
            llvm-cov-15 show build/tests/fuzzer/ddappsec_helper_fuzzer -instr-profile=default.profdata -ignore-filename-regex="(tests|third_party|build)" -format=html > coverage.html
            llvm-cov-15 report -instr-profile default.profdata build/tests/fuzzer/ddappsec_helper_fuzzer -ignore-filename-regex="(tests|third_party|build)" -show-region-summary=false
        working-directory: ${{ github.workspace }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Upload fuzzer results
          path: |
              ${{ github.workspace }}/tests/fuzzer/results/*
              ${{ github.workspace }}/coverage.html
  helper-test-valgrind:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install Valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind
      - name: Cache hunter packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.hunter
          key: ${{ runner.os }}-helper
      - name: Generate Build Scripts
        run: |
            mkdir build
            cd build
            cmake .. -DDD_APPSEC_BUILD_EXTENSION=OFF
      - name: Build
        run: VERBOSE=1 make -j ddappsec-helper ddappsec_helper_test
        working-directory: ${{ github.workspace }}/build
      - name: Test
        run: valgrind --leak-check=full --show-reachable=yes --suppressions=../tests/helper/re2.supp --error-exitcode=1 ./tests/helper/ddappsec_helper_test
        working-directory: ${{ github.workspace }}/build

